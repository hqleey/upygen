module atm {
  // Part 1: System description.
  var state : enum { idle, active };
  var card_inserted : boolean;
  var balance : integer;
  var cash_dispensed : boolean;

  // Initialize the ATM's state
  init {
    state = idle;
    card_inserted = false;
    balance = 1000; // Initial balance for the ATM (can be changed as needed)
    cash_dispensed = false;
  }

  // Part 2: System specification.
  // The ATM behavior can be described using a next state function.

  // Next state function for the ATM.
  next {
    // Transition from idle to active when the card is inserted.
    if state == idle && card_inserted {
      state' = active;
    }
    // Transition from active to idle when cash is dispensed.
    else if state == active && cash_dispensed {
      state' = idle;
    }
    // Stay in the same state otherwise.
    else {
      state' = state;
    }

    // The balance remains unchanged.
    balance' = balance;

    // Cash_dispensed is set to false after every step.
    cash_dispensed' = false;
  }

  // Part 3: Proof script.
  control {
    // Use BMC (Bounded Model Checking) to check properties within 10 steps.
    bmc (10);

    // Specify properties to check.

    // Property 1: The balance is always non-negative.
    invariant non_negative_balance: balance >= 0;

    // Property 2: If the ATM is in the "active" state, then cash is not dispensed.
    invariant no_cash_dispensed_in_active_state: !(state == active && cash_dispensed);
  }
}
